service: ms-manage-user
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: go1.x
  stage: dev
  environment:
    REGION: us-east-1
    USER_TABLE: user
    UNIT_DYNAMODB: ${self:resources.Resources.unit.Properties.TableName}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
      Resource:
#        - {
#          "Fn::Join":
#            [
#              "",
#              [
#                {
#                  "Fn::Join":
#                    [ "", [ "arn:aws:dynamodb:", { "Ref": "AWS::Region" }, ":" ] ],
#                },
#                { "Ref": "AWS::AccountId" },
#                ":table/",
#                "${self:provider.environment.UNIT_DYNAMODB}",
#              ],
#            ],
#        }
#        - "*"
        - "arn:aws:dynamodb:${self:provider.environment.REGION}:*:table/${self:provider.environment.UNIT_DYNAMODB}"
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
      Resource:
        - "arn:aws:dynamodb:${self:provider.environment.REGION}:*:table/${self:provider.environment.UNIT_DYNAMODB}"

  logRetentionInDays: 7

custom:
  version: v1

package:
  patterns:
    - '!./**'
    - ./bin/**

functions:
  createUser:
    handler: bin/createUserHandler
    events:
      - http:
          path: ${self:custom.version}/api/user
          method: post
  createUnit:
    handler: bin/createUnitHandler
    events:
      - http:
          path: ${self:custom.version}/api/unit
          method: post
  readUnit:
    handler: bin/readUnitHandler
    events:
      - http:
          path: ${self:custom.version}/api/unit/{unitId}
          method: get

# you can add CloudFormation resource templates here
resources:
  Resources:
    #Syntax for declare DynamoDB table
    user: #we can define name table
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.stage}-${self:service}-${self:provider.environment.USER_TABLE}
        AttributeDefinitions:
          - AttributeName: userId #key or primmary key
            AttributeType: S #Data type
#          - AttributeName: created
#            AttributeType: N
          - AttributeName: identification
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
#          - AttributeName: created
#            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: identification-index
            KeySchema:
              - AttributeName: identification
                KeyType: HASH
            Projection:
              ProjectionType: ALL
#        ProvisionedThroughput:
#          ReadCapacityUnits: 1
#          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    unit:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.stage}-${self:service}-unit
        AttributeDefinitions:
          - AttributeName: unitId #key or primmary key
            AttributeType: S #Data type
          - AttributeName: name
            AttributeType: S
#          - AttributeName: unitType
#            AttributeType: S
#          - AttributeName: description
#            AttributeType: S
#          - AttributeName: state
#            AttributeType: S
        KeySchema:
          - AttributeName: unitId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: name-index
            KeySchema:
              - AttributeName: name
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES